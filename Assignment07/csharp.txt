 .method public hidebysig static void  SelectionSort(int32[] arr) cil managed
  {
    // Code size       57 (0x39)
    .maxstack  4                    // Set maximum stack size
    .locals init (int32 V_0,        // init variables, var 0 = (i), var 1 = (least), var 2 = (tmp), var 3 = (j)
             int32 V_1,
             int32 V_2,
             int32 V_3)
    IL_0000:  ldc.i4.0				// push 0 to stack
    IL_0001:  stloc.0				// assign 0 to var i
    IL_0002:  br.s       IL_0032	// jump to IL_0032

    IL_0004:  ldloc.0				// load var (i)
    IL_0005:  stloc.1				// store local var 0 to 1 (least)
    IL_0006:  ldloc.0				// load local var (i)
    IL_0007:  ldc.i4.1				// push 1 to stack
    IL_0008:  add					// add the two top values on stack
    IL_0009:  stloc.2				// store value to var (j)
    IL_000a:  br.s       IL_001a	// jump to IL_001a

    IL_000c:  ldarg.0				// load arg 0 (arr)
    IL_000d:  ldloc.2				// load var (j)
    IL_000e:  ldelem.i4				// load element on index j in arr
    IL_000f:  ldarg.0				// load arg 0 (arr)
    IL_0010:  ldloc.1				// load var 1 (least)
    IL_0011:  ldelem.i4				// load element on index least in arr
    IL_0012:  bge.s      IL_0016    // if (arr[j] > arr[least]) then jump to IL_0016

    IL_0014:  ldloc.2				// load var (j)
    IL_0015:  stloc.1				// store value to var (least)
    IL_0016:  ldloc.2				// load var (j)
    IL_0017:  ldc.i4.1				// push 1 to stack
    IL_0018:  add					// add the two top values on stack 
    IL_0019:  stloc.2				// store value to var (j)
    IL_001a:  ldloc.2				// load var (j)
    IL_001b:  ldarg.0				// load arg 0 (arr)
    IL_001c:  ldlen					// load arr.Length
    IL_001d:  conv.i4				// convert uint to int32
    IL_001e:  blt.s      IL_000c	// if (j < arr.Length) then jump to IL_000c

    IL_0020:  ldarg.0				// load arg 0 (arr)
    IL_0021:  ldloc.0				// load var 0 (i)
    IL_0022:  ldelem.i4				// load element on index i in arr
    IL_0023:  stloc.3				// store value to var 3 (tmp)
    IL_0024:  ldarg.0				// load arg 0 (arr)
    IL_0025:  ldloc.0				// load var 0 (i)
    IL_0026:  ldarg.0				// load arg 0 (arr)
    IL_0027:  ldloc.1				// load var 1 (least)
    IL_0028:  ldelem.i4				// load element on index least in arr
    IL_0029:  stelem.i4				// store value to index i in arr
    IL_002a:  ldarg.0				// load arg 0 (arr)
    IL_002b:  ldloc.1				// load var 1 (least)
    IL_002c:  ldloc.3				// load var 3 (tmp)
    IL_002d:  stelem.i4				// store value to index least in arr
    IL_002e:  ldloc.0				// load var 0 (i)
    IL_002f:  ldc.i4.1				// push 1 to stack
    IL_0030:  add					// add the two top values on stack
    IL_0031:  stloc.0				// store value to var 0
    IL_0032:  ldloc.0				// load var 0 (i)
    IL_0033:  ldarg.0				// load arg 0 (arr)
    IL_0034:  ldlen					// load arr.Length
    IL_0035:  conv.i4				// convert uint to int32
    IL_0036:  blt.s      IL_0004	// if (i < arr.Length) then jump to IL_0004

    IL_0038:  ret					// return void
  } // end of method Selsort::SelectionSort